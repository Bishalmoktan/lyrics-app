generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          UserRole  @default(USER)
  password      String?
  image         String?
  accounts      Account[]
  songs         Song[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Artist {
  id          String  @id @default(cuid())
  avatar_url  String
  name        String
  designation String
  isFeatured  Boolean @default(false)

  songs Song[]
}

model Genre {
  id              String @id @default(cuid())
  name            String @unique
  image           String
  backgroundColor String
  songs           Song[]
}

model Song {
  id           String  @id @default(cuid())
  thumbnail    String
  lyrics       String
  title        String
  songId       String
  duration     String
  story        String?
  nepaliLyrics String?
  isFeatured   Boolean @default(false)

  Artist   Artist? @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String?
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  genres   Genre[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String
}
